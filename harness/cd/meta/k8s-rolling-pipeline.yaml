pipeline:
  name: meta-pipeline
  identifier: metapipeline
  projectIdentifier: default_project
  orgIdentifier: default
  description: Pipeline to deploy meta application
  tags: { }
  stages:
    - stage:
        name: Configuration
        identifier: Configuration
        description: Prepare configuration for pipeline
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Resolve Configuration
                  identifier: Resolve_Configuration
                  spec:
                    shell: Bash
                    executionTarget: { }
                    delegateSelectors:
                      - helm-delegate
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash

                          # Lấy giá trị của biến đầu vào từ pipeline
                          project_name="<+pipeline.variables.meta_project_name>"

                          # Kiểm tra các trường hợp project_name không hợp lệ
                          if [ -z "${project_name}" ] || [ "${project_name}" = "null" ] || [ "${project_name}" = "<+serviceVariables.meta_project_name>" ]; then
                              echo "Error: project_name không hợp lệ!"
                              echo "Giá trị hiện tại: '${project_name}'"
                              echo "project_name không được để trống, null hoặc chưa được thay thế biến!"
                              exit 1  # Thoát với mã lỗi 1 để fail step
                          fi

                          # Loại bỏ khoảng trắng đầu và cuối nếu có
                          project_name=$(echo "${project_name}" | xargs)

                          # Kiểm tra lại sau khi đã trim
                          if [ -z "${project_name}" ]; then
                              echo "Error: project_name chỉ chứa khoảng trắng!"
                              exit 1
                          fi

                          # In ra giá trị của project_name nếu hợp lệ
                          echo "Project Name: ${project_name}"

                          # Build output variable
                          namespace="meta-${project_name}"
                          sourceCodePath="/meta/${project_name}"
                          gitBranch="projects/${project_name}"
                        environmentVariables: [ ]
                    outputVariables:
                      - name: namespace
                        type: String
                        value: namespace
                      - name: sourceCodePath
                        type: String
                        value: sourceCodePath
                      - name: gitBranch
                        type: String
                        value: gitBranch
                    outputAlias:
                      key: configuration
                      scope: Pipeline
                  timeout: 2m
          environment:
            environmentRef: k8ssingleenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k8shelmchartinfra
        tags: { }
        timeout: 2m
    - stage:
        name: SourceCode
        identifier: SourceCode
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - stepGroup:
                  name: Prepare Source Code
                  identifier: Prepare_Source_Code
                  steps:
                    - step:
                        type: Run
                        name: Git Clone Source
                        identifier: Git_Clone_Source
                        spec:
                          connectorRef: account.harnessImage
                          image: alpine/git:2.45.2
                          shell: Sh
                          command: |-
                            #!/bin/sh
                            set -e  # Exit on error

                            # Define function to log with timestamp
                            log() {
                              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
                            }

                            # Store the source code path in a variable
                            SOURCE_CODE_PATH="<+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.sourceCodePath>"
                            GIT_BRANCH="<+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.gitBranch>"

                            # Validate input parameters
                            if [ -z "$SOURCE_CODE_PATH" ] || [ -z "$GIT_BRANCH" ]; then
                              log "Error: Required parameters are missing"
                              log "SOURCE_CODE_PATH: $SOURCE_CODE_PATH"
                              log "GIT_BRANCH: $GIT_BRANCH"
                              exit 1
                            fi

                            # Test Git SSH connection and show full response
                            log "Testing Git SSH connection..."
                            SSH_RESPONSE=$(timeout 10 ssh -T -o BatchMode=yes -o ConnectTimeout=5 git@github.com 2>&1)
                            SSH_EXIT_CODE=$?
                            log "SSH Connection Response: $SSH_RESPONSE"
                            # Check the exit code
                            case $SSH_EXIT_CODE in
                              1)
                                log "Connect github successfully"
                                ;;
                              124)
                                log "Error: SSH connection timed out after 10 seconds"
                                exit 1
                                ;;
                              255)
                                log "Error: SSH connection failed - $SSH_RESPONSE"
                                exit 1
                                ;;
                              *)
                                log "Error: SSH connection failed with exit code $SSH_EXIT_CODE - $SSH_RESPONSE"
                                exit 1
                                ;;
                            esac

                            # Function to handle Git operations with error checking
                            git_operation() {
                              if ! "$@"; then
                                log "Error: Git operation failed: $*"
                                exit 1
                              fi
                            }

                            log "Current directory: $(pwd)"
                            log "Working with source code path: $SOURCE_CODE_PATH"

                            if [ -d "$SOURCE_CODE_PATH/.git" ]; then
                              log "Git repository already exists. Performing git pull with rebase."
                              cd "$SOURCE_CODE_PATH"

                              # Fetch all branches
                              git_operation git fetch origin

                              # Check if branch exists
                              if ! git rev-parse --verify "origin/$GIT_BRANCH" >/dev/null 2>&1; then
                                log "Error: Branch $GIT_BRANCH does not exist on remote"
                                exit 1
                              fi

                              # Checkout and pull
                              git_operation git checkout "$GIT_BRANCH"
                              git_operation git pull --rebase --autostash origin "$GIT_BRANCH"
                            else
                              log "No Git repository found. Performing fresh clone."

                              # Create parent directory if it doesn't exist
                              mkdir -p "$(dirname "$SOURCE_CODE_PATH")"

                              # Perform clone
                              git_operation git clone git@github.com:vjcspy/meta.git -b "$GIT_BRANCH" "$SOURCE_CODE_PATH"
                            fi

                            log "Git operations completed successfully"
                          resources:
                            limits:
                              memory: 2000Mi
                              cpu: 500m
                  stepGroupInfra:
                    type: KubernetesDirect
                    spec:
                      connectorRef: harnessk8sconnector
                      namespace: harness-cd
                      volumes:
                        - mountPath: /meta
                          type: HostPath
                          spec:
                            path: /mnt/existing_ebs_volume/meta
                            type: Directory
                        - mountPath: /root/.ssh
                          type: HostPath
                          spec:
                            path: /home/ec2-user/.ssh
                            type: Directory
                      initTimeout: 5m
              - stepGroup:
                  name: Build Code
                  identifier: Build_Code
                  steps:
                    - step:
                        type: Run
                        name: Build
                        identifier: Build
                        spec:
                          connectorRef: account.harnessImage
                          image: vjcspy/node:20-pnpm-2
                          shell: Sh
                          command: |-
                            #!/bin/sh
                            set -e  # Exit on error

                            # Define function to log with timestamp
                            log() {
                              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
                            }

                            SOURCE_CODE_PATH="<+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.sourceCodePath>"

                            # Validate source code path
                            if [ -z "$SOURCE_CODE_PATH" ]; then
                              log "Error: SOURCE_CODE_PATH is missing"
                              exit 1
                            fi

                            # Change to source code directory
                            log "Changing to source code directory: $SOURCE_CODE_PATH"
                            cd "$SOURCE_CODE_PATH"

                            # Verify installations
                            log "Node version: $(node -v)"
                            log "NPM version: $(npm -v)"
                            log "PNPM version: $(pnpm -v)"

                            # Install dependencies
                            log "Installing dependencies with pnpm..."
                            pwd
                            ls -la
                            pnpm install --frozen-lockfile

                            # Build the application
                            log "Building the application..."
                            pnpm run build

                            log "Build completed successfully"
                          privileged: false
                          resources:
                            limits:
                              memory: 3000Mi
                              cpu: 500m
                        description: Install dependencies and build application with pnpm
                  stepGroupInfra:
                    type: KubernetesDirect
                    spec:
                      connectorRef: harnessk8sconnector
                      namespace: harness-cd
                      volumes:
                        - mountPath: /meta
                          type: HostPath
                          spec:
                            path: /mnt/existing_ebs_volume/meta
                            type: Directory
                      initTimeout: 10m
            rollbackSteps: [ ]
          serviceDependencies: [ ]
        tags: { }
    - stage:
        name: Deploy
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: meta
          environment:
            environmentRef: k8ssingleenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k8shelmchartinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: { }
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  variables:
    - name: meta_project_name
      type: String
      default: stock
      description: Phải có branch projects/NAME
      required: true
      value: <+input>.default(stock).allowedValues(stock,binance)
    - name: api
      type: String
      description: Có deploy API hay không?
      required: true
      value: <+input>.default(true).allowedValues(true,false)
    - name: frontend
      type: String
      description: Có deploy Frontend hay không?
      required: true
      value: <+input>.default(false).allowedValues(true,false)
    - name: num_of_instance
      type: Number
      description: Số lượng api request instance
      required: true
      value: <+input>.default(2)
    - name: num_of_job
      type: Number
      description: Số lượng api request instance
      required: true
      value: <+input>.default(2)
