pipeline:
  name: meta-pipeline
  identifier: metapipeline
  projectIdentifier: default_project
  orgIdentifier: default
  description: Pipeline to deploy meta application
  tags: {}
  stages:
    - stage:
        name: Configuration
        identifier: Configuration
        description: Prepare configuration for pipeline
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Resolve Configuration
                  identifier: Resolve_Configuration
                  spec:
                    shell: Bash
                    executionTarget: {}
                    delegateSelectors:
                      - helm-delegate
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash

                          # Lấy giá trị của biến đầu vào từ pipeline
                          project_name="<+pipeline.variables.meta_project_name>"

                          # Kiểm tra các trường hợp project_name không hợp lệ
                          if [ -z "${project_name}" ] || [ "${project_name}" = "null" ] || [ "${project_name}" = "<+serviceVariables.meta_project_name>" ]; then
                              echo "Error: project_name không hợp lệ!"
                              echo "Giá trị hiện tại: '${project_name}'"
                              echo "project_name không được để trống, null hoặc chưa được thay thế biến!"
                              exit 1  # Thoát với mã lỗi 1 để fail step
                          fi

                          # Loại bỏ khoảng trắng đầu và cuối nếu có
                          project_name=$(echo "${project_name}" | xargs)

                          # Kiểm tra lại sau khi đã trim
                          if [ -z "${project_name}" ]; then
                              echo "Error: project_name chỉ chứa khoảng trắng!"
                              exit 1
                          fi

                          # In ra giá trị của project_name nếu hợp lệ
                          echo "Project Name: ${project_name}"

                          # Build output variable
                          namespace="meta-${project_name}"
                          sourceCodePath="/meta/${project_name}"
                          gitBranch="projects/${project_name}"
                    environmentVariables: []
                    outputVariables:
                      - name: namespace
                        type: String
                        value: namespace
                      - name: sourceCodePath
                        type: String
                        value: sourceCodePath
                      - name: gitBranch
                        type: String
                        value: gitBranch
                    outputAlias:
                      key: configuration
                      scope: Pipeline
                  timeout: 2m
          environment:
            environmentRef: k8ssingleenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k8shelmchartinfra
        tags: {}
        timeout: 2m
    - stage:
        name: SourceCode
        identifier: SourceCode
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - stepGroup:
                  name: Prepare Source Code
                  identifier: Prepare_Source_Code
                  steps:
                    - step:
                        type: GitClone
                        name: GitClone_1
                        identifier: GitClone_1
                        spec:
                          connectorRef: vjcspygitconnector
                          repoName: meta
                          cloneDirectory: <+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.sourceCodePath>
                          build:
                            type: branch
                            spec:
                              branch: <+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.gitBranch>
                  stepGroupInfra:
                    type: KubernetesDirect
                    spec:
                      connectorRef: harnessk8sconnector
                      namespace: harness-cd
                      volumes:
                        - mountPath: /meta
                          type: HostPath
                          spec:
                            path: /mnt/existing_ebs_volume/meta
                            type: Directory
            rollbackSteps: []
          serviceDependencies: []
        tags: {}
    - stage:
        name: Deploy
        identifier: Deploy
        description: Rolling Deploy
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: meta
          environment:
            environmentRef: k8ssingleenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k8shelmchartinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
  variables:
    - name: meta_project_name
      type: String
      description: Phải có branch projects/NAME
      required: true
      value: <+input>.default(stock).allowedValues(stock,binance)
      default: stock
