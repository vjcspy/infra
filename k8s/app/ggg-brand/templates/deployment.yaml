apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ggg-brand.fullname" . }}
  labels:
    {{- include "ggg-brand.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ggg-brand.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ggg-brand.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
        # First time after restart cluster always fail
        - name: init-container-check-host-mounted-ebs-volume
          image: busybox
          command: [ 'sh', '-c', 'for i in $(seq 1 5); do echo "Checking attempt $i..."; if [ -f /host_ebs_volume/DONT_DELETE ]; then echo "File found, exiting successfully."; exit 0; fi; echo "File not found, retrying..."; sleep 10; done; echo "File not found after 5 attempts, exiting with error."; exit 1' ]
          volumeMounts:
            - name: host-volume
              mountPath: /host_ebs_volume
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ggg-brand.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: php-nginx
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: https
              containerPort: {{ .Values.service.port }}
              protocol: TCP
{{/*          livenessProbe:*/}}
{{/*            {{- toYaml .Values.livenessProbe | nindent 12 }}*/}}
{{/*          readinessProbe:*/}}
{{/*            {{- toYaml .Values.readinessProbe | nindent 12 }}*/}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            # mount brand magento source
            - name: host-volume
              mountPath: /brand-pcms
              subPath: ggg_mkt/brand-pcms
            # mount root vhost config
            - name: host-volume
              mountPath: /opt/docker/etc/nginx/vhost.conf
              subPath: ggg_mkt/config/nginx/vhost.conf
              readOnly: true
            # mount nginx
            - name: host-volume
              mountPath: /opt/docker/etc/nginx/site-available
              subPath: ggg_mkt/config/nginx/site-available
              readOnly: true
            # mount ssl
            - name: host-volume
              mountPath: /opt/docker/etc/ssl
              subPath: ggg_mkt/config/ssl
              readOnly: true
            - name: host-volume
              mountPath: /opt/docker/robots
              subPath: ggg_mkt/ggg-nextjs/packages/web/public/robots
              readOnly: true
        - name: mysql
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: mysql:5.7
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: docker
            - name: MYSQL_USER
              value: docker
            - name: MYSQL_PASSWORD
              value: docker
          volumeMounts:
            - name: host-volume
              mountPath: /var/lib/mysql
              subPath: ggg_mkt/docker_data/mysql
            - name: host-volume
              mountPath: /var/log/mysql
              subPath: ggg_mkt/docker_data/logs/mysql
        - name: elasticsearch
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: docker.elastic.co/elasticsearch/elasticsearch:7.8.1
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: discovery.type
              value: single-node
            - name: cluster.max_shards_per_node
              value: "5100"
          volumeMounts:
            - name: host-volume
              mountPath: /usr/share/elasticsearch/data
              subPath: ggg_mkt/docker_data/elasticsearch
        - name: redis
          image: redis:5.0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: "64Mi"
              cpu: "200m"
            limits:
              memory: "128Mi"
              cpu: "200m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 30
            failureThreshold: 3
          securityContext:
            capabilities:
              add:
                - SYS_RESOURCE
          env:
            - name: NET_CORE_SOMAXCONN
              value: "1024"
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
