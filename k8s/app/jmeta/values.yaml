# Default values for jmeta.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: <+pipeline.variables.num_of_instance>

namespace: <+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.namespace>
projectName: <+pipeline.variables.project_name>

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: vjcspy/quarkus
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: "jmeta-<+pipeline.variables.project_name>"
fullnameOverride: "jmeta-<+pipeline.variables.project_name>"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  redeployTimestamp: "{{ now | unixEpoch }}"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

podEnv:
  BUILD_TIME: "<+pipeline.stages.Configuration.spec.execution.steps.Resolve_Configuration.output.outputVariables.buildTime>"
  GIT_COMMIT_HASH: "<+pipeline.stages.SourceCode.spec.execution.steps.Prepare_Source_Code.steps.Git_Clone_Source.output.outputVariables.gitCommitHash>"
  GIT_COMMIT_MESSAGE: "<+pipeline.stages.SourceCode.spec.execution.steps.Prepare_Source_Code.steps.Git_Clone_Source.output.outputVariables.gitCommitMessage>"
  GIT_COMMIT_TIME: "<+pipeline.stages.SourceCode.spec.execution.steps.Prepare_Source_Code.steps.Git_Clone_Source.output.outputVariables.gitCommitTime>"

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 185

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    # Chỉ định Ingress class
    kubernetes.io/ingress-class: nginx
    nginx.ingress.kubernetes.io/ssl-verify: "false"

    # Enable SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    # Cấu hình SSL
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1 TLSv1.1 TLSv1.2"

    # Cấu hình proxy headers
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      X-Real-IP: $remote_addr
      X-Forwarded-For: $proxy_add_x_forwarded_for
      X-Nginx-Proxy: "true"

    # Cấu hình GZIP
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss image/svg+xml"
    nginx.ingress.kubernetes.io/gzip-min-length: "1100"
    nginx.ingress.kubernetes.io/gzip-comp-level: "6"

    # Cấu hình proxy buffer
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
  hosts:
    - host: j<+pipeline.variables.project_name>.bluestone.systems
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - j<+pipeline.variables.project_name>.bluestone.systems

resources:
  limits:
    cpu: 8000m
    memory: 4000Mi
  requests:
    cpu: 200m
    memory: 256Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /q/health/live
    port: http
  initialDelaySeconds: 20
  periodSeconds: 30
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /q/health/ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 30
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /q/health/ready
    port: http
  failureThreshold: 30
  periodSeconds: 45

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: host-volume
    hostPath:
      path: /mnt/existing_ebs_volume
      type: Directory
  - name: tmp-volume
    emptyDir: { }

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: host-volume
    # mountPath: la path trong docker
    mountPath: /deployments
    # subPath: la path con o trong volume mount
    subPath: jmeta/<+pipeline.variables.project_name>/projects/<+pipeline.variables.project_name>/build/quarkus-app
  - name: tmp-volume
    mountPath: /tmp

nodeSelector: {}

tolerations: []

affinity: {}